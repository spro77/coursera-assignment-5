@page "/fetchproducts"
@inject HttpClient Http

<h3>Product List</h3>

@if (isLoading)
{
    <p><em>Loading products...</em></p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        <strong>Error:</strong> @errorMessage
    </div>
    <button class="btn btn-primary" @onclick="LoadProductsAsync">Retry</button>
}
else if (products != null && products.Length > 0)
{
    <ul>
        @foreach (var product in products)
        {
            <li>
                <strong>@product.Name</strong> - $@product.Price.ToString("F2")
                <span class="text-muted">(Stock: @product.Stock)</span>
            </li>
        }
    </ul>
}
else
{
    <p>No products available.</p>
}

@code {
    private Product[]? products;
    private bool isLoading = true;
    private string? errorMessage;
    private const int RequestTimeoutSeconds = 10;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadProductsAsync();
    }

    private async Task LoadProductsAsync()
    {
        // Reset state
        isLoading = true;
        errorMessage = null;
        products = null;

        try
        {
            // Configure timeout for the request
            using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(RequestTimeoutSeconds));
            
            // Make API call with timeout
            var response = await Http.GetAsync("api/productlist", cts.Token);

            // Check if response is successful
            if (response.IsSuccessStatusCode)
            {
                products = await response.Content.ReadFromJsonAsync<Product[]>(cancellationToken: cts.Token);
                
                // Validate the response data
                if (products == null)
                {
                    errorMessage = "Received invalid data from the server.";
                }
            }
            else
            {
                errorMessage = $"Server returned error: {response.StatusCode} - {response.ReasonPhrase}";
            }
        }
        catch (TaskCanceledException)
        {
            errorMessage = $"Request timed out after {RequestTimeoutSeconds} seconds. Please check your connection and try again.";
        }
        catch (HttpRequestException ex)
        {
            errorMessage = $"Network error: Unable to connect to the server. {ex.Message}";
        }
        catch (System.Text.Json.JsonException ex)
        {
            errorMessage = $"Invalid response format: {ex.Message}";
        }
        catch (Exception ex)
        {
            errorMessage = $"An unexpected error occurred: {ex.Message}";
            // Log the full exception for debugging purposes
            Console.Error.WriteLine($"Error fetching products: {ex}");
        }
        finally
        {
            isLoading = false;
        }
    }

    public class Product
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public double Price { get; set; }
        public int Stock { get; set; }
    }
}
