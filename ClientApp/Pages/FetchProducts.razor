@page "/fetchproducts"
@using ClientApp.Models
@using ClientApp.Services
@inject ProductService ProductService

<h3>Product List</h3>

@if (isLoading)
{
    <p><em>Loading products...</em></p>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        <strong>Error:</strong> @errorMessage
    </div>
    <button class="btn btn-primary" @onclick="() => LoadProductsAsync()">Retry</button>
    <button class="btn btn-secondary" @onclick="() => LoadProductsAsync(true)">Force Refresh</button>
}
else if (products != null && products.Length > 0)
{
    <div class="mb-2">
        <button class="btn btn-sm btn-outline-secondary" @onclick="() => LoadProductsAsync(true)">Refresh Data</button>
    </div>
    <ul>
        @foreach (var product in products)
        {
            <li>
                <strong>@product.Name</strong> - $@product.Price.ToString("F2")
                <span class="text-muted">(Stock: @product.Stock)</span>
                @if (product.Category != null)
                {
                    <br />
                    <small class="text-info">Category: @product.Category.Name</small>
                }
            </li>
        }
    </ul>
}
else
{
    <p>No products available.</p>
}

@code {
    private Product[]? products;
    private bool isLoading = true;
    private string? errorMessage;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadProductsAsync();
    }

    private async Task LoadProductsAsync(bool forceRefresh = false)
    {
        isLoading = true;
        errorMessage = null;
        products = null;

        var (fetchedProducts, error) = await ProductService.GetProductsAsync(forceRefresh);
        
        products = fetchedProducts;
        errorMessage = error;
        isLoading = false;
    }
}
